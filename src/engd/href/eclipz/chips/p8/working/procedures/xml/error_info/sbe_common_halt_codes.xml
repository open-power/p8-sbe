<!-- $Id: sbe_common_halt_codes.xml,v 1.6 2014/07/23 19:51:50 jmcgill Exp $ -->
<!-- Halt codes for proc_sbe_* procedures common to P8 and Centaur -->
<hwpErrors>
  <!-- ******************************************************************** -->
  <!-- ** Generic halt codes                                                -->
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_SUCCESS</rc>
    <description>
      This halt code does not represent an error; This is the code associated
      with the normal successful completion of an IPL by an SBE istep
      procedure.
    </description>
    <sbeError/>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_SUCCESS_SLAVE_CHIP</rc>
    <description>
      This halt code does not represent an error; This is the code associated
      with the normal successful completion of an IPL by an SBE istep
      procedure on a slave chip.
    </description>
    <sbeError/>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PAUSE_WITH_SUCCESS</rc>
    <description>
      This halt code does not represent an error; This is the code associated
      with a procedure initiated halt of the SBE code, with the expectation
      that it will be resumed at a later point in time.
    </description>
    <sbeError/>
  </hwpError>
  <!-- ******************************************************************** -->
  <!-- ** Halt codes from sbe_common.H                                      -->
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PROC_ENTRY_HALT</rc>
    <description>
      This halt code does not represent an error; This is the code associated
      with a HALT requested by the user prior to the execution of a procedure
      by setting the PROC_CONTROL_ENTRY_HALT bit in the control word for the
      procedure.
    </description>
    <sbeError/>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PROC_EXIT_HALT</rc>
    <description>
      This halt code does not represent an error; This is the code associated
      with a HALT requested by the user after the execution of a procedure
      by setting the PROC_CONTROL_EXIT_HALT bit in the control word for the
      procedure.
    </description>
    <sbeError/>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PROC_CHECKSTOP</rc>
    <description>
      This halt code indicates that a checkstop was detected after executing a
      procedure.  Use the fields of the SBEVITAL register to identify the
      procedure that failed.
    </description>
    <sbeError/>
    <collectFfdc>proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE</collectFfdc>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PROC_RECOVERABLE</rc>
    <description>
      This halt code indicates that a recoverable error was detected after
      executing a procedure.  Use the fields of the SBEVITAL register to
      identify the procedure that failed.
    </description>
    <sbeError/>
    <collectFfdc>proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE</collectFfdc>
    <callout>
      <target>CHIP</target>
      <priority>LOW</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>HIGH</priority>
    </callout>
   </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PROC_SPATTN</rc>
    <description>
      This halt code indicates that a Special Attention was detected after
      executing a procedure.  Use the fields of the SBEVITAL register to
      identify the procedure that failed.
    </description>
    <sbeError/>
    <collectFfdc>proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_FIR_FAIL, POR_FFDC_OFFSET_NONE</collectFfdc>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <!-- ** Halt codes from proc_sbe_pore_errors.S                            -->
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PORE_ERROR0</rc>
    <description>
      This halt code indicates that an execution-phase PIB/PCB access
      returned a non-0 response.  The PORE PIBMS_DBG registers 0 and 1
      (plus the remainder of the PORE state) contain the information required
      for an initial debug of the problem.

      This error should never occur for SBE/SLW, based on the fact that the
      HW error handler mechanism is disabled.
    </description>
    <sbeError/>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>LOW</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PORE_ERROR1</rc>
    <description>
      This halt code indicates that an execution-phase OCI accesss had an
      error.  The PORE PIBMS_DBG registers 0 and 1 (plus the remainder of the
      PORE state) contain the information required for an initial debug of the
      problem.

      This error should never occur for SBE/SLW, based on the fact that the
      HW error handler mechanism is disabled.
    </description>
    <sbeError/>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>LOW</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PORE_ERROR2</rc>
    <description>
      This halt code indicates an instruction fetch or decode error. The PORE
      specification lists several causes of this error code.  The most likely
      causes in a production system are:
      o An I2C hang when fetching code from SEEPROM;
      o A bad branch that starts executing garbage or data;
      o Memory corruption

      This error should never occur for SBE/SLW, based on the fact that the
      HW error handler mechanism is disabled.
    </description>
    <sbeError/>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>LOW</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PORE_ERROR3</rc>
    <description>
      This halt code indicates an internal data error during consistency
      checking, e.g., a bad scan-data CRC.

      This error should never occur for SBE/SLW, based on the fact that the
      HW error handler mechanism is disabled.
    </description>
    <sbeError/>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>LOW</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_PORE_ERROR4</rc>
    <description>
      This halt code indicates that a second error occurred during processing
      of an initial error.

      This error should never occur for SBE/SLW, based on the fact that the
      HW error handler mechanism is disabled.
    </description>
    <sbeError/>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <callout>
      <procedure>CODE</procedure>
      <priority>LOW</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <!-- ** Halt codes from scan0 subroutine                                  -->
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_SCAN0_DONE_POLL_THRESHOLD</rc>
    <description>
      This error is signalled by the scan0 subroutine, indicating that the
      scan0 DONE polling reached the specified threshold value. The scan0
      subroutine could have been called by various procedures.
    </description>
    <sbeError/>
    <collectFfdc>proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_SCAN_FLUSH_FAIL, POR_FFDC_OFFSET_USE_P1</collectFfdc>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
  <!-- ** Halt codes from arrayinit subroutine                              -->
  <!-- ******************************************************************** -->
  <hwpError>
    <rc>RC_SBE_ARRAYINIT_POLL_THRESHOLD</rc>
    <description>
      This error is signalled by the arrayinit subroutine, indicating that the
      arrayinit DONE polling reached the specified threshold value. The arrayinit
      subroutine could have been called by various procedures.
    </description>
    <sbeError/>
    <collectFfdc>proc_extract_pore_halt_ffdc, pore_state, PORE_HALT_ARRAYINIT_FAIL, POR_FFDC_OFFSET_USE_P1</collectFfdc>
    <callout>
      <target>CHIP</target>
      <priority>HIGH</priority>
    </callout>
    <deconfigure>
      <target>CHIP</target>
    </deconfigure>
    <gard>
      <target>CHIP</target>
    </gard>
  </hwpError>
  <!-- ******************************************************************** -->
</hwpErrors>
